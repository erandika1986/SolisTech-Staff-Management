@page "/Project/List"
@using Microsoft.AspNetCore.Authorization
@using StaffApp.Application.DTOs.Common
@using StaffApp.Application.DTOs.Project
@using StaffApp.Application.Services
@using StaffApp.Domain.Enum
@using System.Reflection
@using System.ComponentModel.DataAnnotations

@inject IProjectService ProjectService
@inject IDialogService Dialog
@inject IMasterDataService MasterDataService

@attribute [Authorize]
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="() => AddNewProjectAsync()"></MudIconButton>
    </MudItem>
    <MudItem xs="12" sm="12" md="12" lg="12">
        @if (!_isMasterDataLoaded)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText>Loading master data...</MudText>
        }
        else
        {
            <MudDataGrid @ref="_dataGrid" T="ProjectDTO" ServerData="@(LoadData)" Sortable="true"
            Filterable="false"
            Hideable="true"
            Hover="true"
            Striped="true"
            Elevation="25"
            Loading="@_loading">
                <ToolBarContent>

                    <MudGrid>
                        <MudItem xs="12" sm="12" md="4" lg="4">
                            <MudText Typo="Typo.h6">Manage Company Project</MudText>
                            <MudSpacer />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="8" lg="8">

                            <MudPaper Class="d-flex align-center gap-2" Style="padding: 8px;">
                                <MudSelect T="DropDownDTO" Label="Project Status" Class="mt-0" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" Value="SelectedProjectStatus" ValueChanged="@ProjectStatusChanged" Style="padding-right:2px;">
                                    @foreach (var projectStatus in ProjectStatuses)
                                    {
                                        <MudSelectItem T="DropDownDTO" Value="@projectStatus">@projectStatus.Name</MudSelectItem>
                                    }
                                </MudSelect>

                                <MudTextField T="string" Label="Search" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </MudPaper>

                        </MudItem>
                    </MudGrid>

                </ToolBarContent>
                <Columns>

                    <PropertyColumn Property="x=>x.Name" Title="@GetDisplayName(typeof(ProjectDTO), nameof(ProjectDTO.Name))" />
                    <PropertyColumn Property="x=>x.StartDateText" Title="@GetDisplayName(typeof(ProjectDTO), nameof(ProjectDTO.StartDateText))" />
                    <PropertyColumn Property="x=>x.EndDateText" Title="@GetDisplayName(typeof(ProjectDTO), nameof(ProjectDTO.EndDateText))" />
                    <PropertyColumn Property="x=>x.ManagementPlatformName" Title="@GetDisplayName(typeof(ProjectDTO), nameof(ProjectDTO.ManagementPlatformName))" />
                    @*                     <PropertyColumn Property="x=>x.StatusText" Title="@GetDisplayName(typeof(EmployeeSalaryBasicDTO), nameof(EmployeeSalaryBasicDTO.StatusText))" /> *@
                    <PropertyColumn Property="x=>x.ManagerName" Title="@GetDisplayName(typeof(ProjectDTO), nameof(ProjectDTO.ManagerName))" />
                    <PropertyColumn Property="x=>x.StatusName" Title="@GetDisplayName(typeof(ProjectDTO), nameof(ProjectDTO.StatusName))" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="project">

                            <MudStack Row>
                                <MudTooltip Text="Edit User" Color="Color.Primary" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Filled" OnClick="() => EditProjectAsync(project.Item)"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Delete User" Color="Color.Error" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" OnClick="() => DeleteProjectAsync(project.Item)"></MudIconButton>
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ProjectDTO" />
                </PagerContent>
            </MudDataGrid>
        }

    </MudItem>
</MudGrid>

@code {
    private string _searchString = "";
    private bool _loading = false;
    private bool _isMasterDataLoaded = false;
    private MudDataGrid<ProjectDTO> _dataGrid;


    private List<ProjectDTO> Projects { get; set; } = new List<ProjectDTO>();


    private IEnumerable<DropDownDTO> ProjectStatuses = new List<DropDownDTO>();
    private DropDownDTO SelectedProjectStatus = new DropDownDTO();


    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    private Task OnSearch(string text)
    {
        _searchString = text;
        return _dataGrid.ReloadServerData();
    }

    private void ProjectStatusChanged(DropDownDTO changedValue)
    {
        SelectedProjectStatus = changedValue;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterDataAsync();
    }

    private async Task LoadMasterDataAsync()
    {
        try
        {
            // Load your master data
            ProjectStatuses = MasterDataService.GetProjectStatus(true);
            SelectedProjectStatus = ProjectStatuses.FirstOrDefault();

            _isMasterDataLoaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading master data: {ex.Message}");
        }
    }

    private async Task<GridData<ProjectDTO>> LoadData(GridState<ProjectDTO> state)
    {
        _loading = true;

        try
        {
            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Extract sorting parameters
            var sortBy = state.SortDefinitions.FirstOrDefault()?.SortBy;
            var sortDirection = state.SortDefinitions.FirstOrDefault()?.Descending == true ? false : true;

            // Call the service with parameters
            var result = await ProjectService.GetAllProjectsAsync(
                page,
                pageSize,
                SelectedProjectStatus.Id,
                _searchString,
                sortBy,
                sortDirection
            );

            // Return the result in GridData format
            return new GridData<ProjectDTO>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task AddNewProjectAsync()
    {
        
    }

    private async Task EditProjectAsync(ProjectDTO project)
    {

    }

    private async Task DeleteProjectAsync(ProjectDTO project)
    {

    }

    string GetDisplayNameByPropertyInfro(PropertyInfo prop)
    {
        var displayAttribute = prop.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? prop.Name;
    }

    string GetDisplayName(Type type, string propertyName)
    {
        var prop = type.GetProperty(propertyName);
        var displayAttribute = prop?.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? propertyName;
    }
}
