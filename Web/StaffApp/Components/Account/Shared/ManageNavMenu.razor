@using Microsoft.AspNetCore.Identity
@using StaffApp.Application.Services
@using StaffApp.Domain.Entity.Authentication

@inject SignInManager<ApplicationUser> SignInManager
@inject ICompanySettingService CompanySettingService

<MudNavMenu>
    <MudNavLink Href="Account/Manage" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
    @if (IsPasswordLoginEnable)
    {
        <MudNavLink Href="Account/Manage/Email" Icon="@Icons.Material.Filled.Email">Email</MudNavLink>
        <MudNavLink Href="Account/Manage/ChangePassword" Icon="@Icons.Material.Filled.Lock">Password</MudNavLink>
    }

    @if (hasExternalLogins && IsPasswordLoginEnable)
    {
        <MudNavLink Href="Account/Manage/ExternalLogins" Icon="@Icons.Material.Filled.PhoneLocked">External logins</MudNavLink>
    }
    @if (IsPasswordLoginEnable)
    {
        <MudNavLink Href="Account/Manage/TwoFactorAuthentication" Icon="@Icons.Material.Filled.LockClock">Two-factor authentication</MudNavLink>
        <MudNavLink Href="Account/Manage/PersonalData" Icon="@Icons.Material.Filled.PersonRemove">Personal data</MudNavLink>
    }

</MudNavMenu>

@code {
    private bool hasExternalLogins;
    private bool IsPasswordLoginEnable { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var companySettings = await CompanySettingService.GetCompanyDetail();
        IsPasswordLoginEnable = companySettings.IsPasswordLoginEnable;

        hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
    }
}
