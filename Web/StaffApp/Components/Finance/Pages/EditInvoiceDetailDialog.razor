@using StaffApp.Application.DTOs.Common
@using StaffApp.Application.DTOs.Finance
@using StaffApp.Application.Services
@using StaffApp.Infrastructure.Services

@inject IInvoiceService InvoiceService
@inject IAzureBlobService AzureBlobService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject LoadingService LoadingService
@inject IDialogService Dialog


<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudPaper class="pa-2">
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudGrid>
                            <MudItem xs="12" sm="12" md="6" lg="6">
                                <MudTextField Variant="Variant.Outlined" Adornment="Adornment.End" @bind-Value="InvoiceDetail.Description" Label="Note" Lines="1" Required="true" RequiredError="Note is required!" Disabled="IsDisabled" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudNumericField T="decimal"
                                                 Label="Total Hours"
                                                 @bind-Value="InvoiceDetail.TotalHours"
                                                 Variant="Variant.Outlined"
                                                 Adornment="Adornment.End"
                                                 AdornmentText="Hours"
                                                 Step="0.25m"
                                                 Min="0"
                                                 Immediate="true"
                                                 DecimalPlaces="2" Format="0.00" Disabled=" IsDisabled" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="3" lg="3">
                                <MudNumericField T="decimal"
                                                 Label="Amount"
                                                 @bind-Value="InvoiceDetail.Amount"
                                                 Variant="Variant.Outlined"
                                                 Adornment="Adornment.End"
                                                 AdornmentText="$"
                                                 Step="0.25m"
                                                 Min="0"
                                                 Immediate="true"
                                                 DecimalPlaces="2" Format="0.00" Disabled=" IsDisabled" />
                            </MudItem>


                        </MudGrid>
                    </MudForm>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudPaper Class="pa-2">
            <MudButton Variant="Variant.Filled" OnClick="Cancel" Class="mr-1">Close</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveInvoiceDetailAsync" StartIcon="@Icons.Material.Filled.Save"
                       Disabled="@(!success)" Class="mr-1"> Save</MudButton>

        </MudPaper>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public InvoiceDetailDTO InvoiceDetail { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> OnDetailDialogClosed { get; set; }

    //private InvoiceDetailDTO InvoiceDetail { get; set; } = new();

    bool success;
    string[] errors = { };
    MudForm form;

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task SaveInvoiceDetailAsync()
    {
        LoadingService.Show();
        var response = await InvoiceService.SaveInvoiceDetail(InvoiceDetail);
       await ShowSnackbar(response);
        LoadingService.Hide();

        await OnDetailDialogClosed.InvokeAsync(true); // Notify parent
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task ShowSnackbar(GeneralResponseDTO result)
    {
        if (result.Flag)
        {
            Snackbar.Add(result.Message, Severity.Success, c => c.SnackbarVariant = Variant.Filled);
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
