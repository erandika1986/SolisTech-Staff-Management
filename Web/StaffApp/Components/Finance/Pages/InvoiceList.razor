@page "/Finance/InvoiceList"
@using Microsoft.AspNetCore.Authorization
@using StaffApp.Application.DTOs.Common
@using StaffApp.Application.DTOs.Finance
@using StaffApp.Application.Services
@using StaffApp.Domain.Enum
@using StaffApp.Infrastructure.Services
@using System.Reflection
@using System.ComponentModel.DataAnnotations


@inject IInvoiceService InvoiceService
@inject IMasterDataService MasterDataService
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime
@inject LoadingService LoadingService

@attribute [Authorize]
<MudGrid>
    <MudItem xs="12" sm="12" md="12" lg="12">
        @if (!_isMasterDataLoaded)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText>Loading master data...</MudText>
        }
        else
        {
            <MudDataGrid @ref="_dataGrid" T="InvoiceDTO" ServerData="@(LoadData)" Sortable="true"
                         Filterable="false"
                         Hideable="true"
                         Hover="true"
                         Striped="true"
                         Elevation="25"
                         Loading="@_loading">
                <ToolBarContent>
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="4" lg="4">
                            <MudText Typo="Typo.h6">Manage Monthly Invoices</MudText>
                            <MudSpacer />
                        </MudItem>
                        <MudItem xs="12" sm="12" md="8" lg="8">

                            <MudPaper Class="d-flex align-center gap-2" Style="padding: 8px;">
                                <MudSelect T="DropDownDTO"
                                           Label="Company Year"
                                           Class="mt-0"
                                           ToStringFunc="(item) => item  is not null? item.Name:string.Empty"
                                           MultiSelection="false" Value="SelectedCompanyYear"
                                           ValueChanged="@CompanyYearChanged"
                                           Style="padding-right:2px;">
                                    @foreach (var companyYear in CompanyYears)
                                    {
                                        <MudSelectItem T="DropDownDTO"
                                                       Value="@companyYear">
                                            @companyYear.Name
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                                <MudSelect T="DropDownDTO"
                                           Label="Month"
                                           Class="mt-0"
                                           ToStringFunc="(item) => item  is not null? item.Name:string.Empty"
                                           MultiSelection="false" Value="SelectedMonth"
                                           ValueChanged="@MonthChanged"
                                           Style="padding-right:2px;">
                                    @foreach (var month in Months)
                                    {
                                        <MudSelectItem T="DropDownDTO"
                                                       Value="@month">
                                            @month.Name
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                                <MudTooltip Text="Generate Monthly Salary"
                                            Color="Color.Info"
                                            Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.PlayCircleFilled"
                                                   Color="Color.Info"
                                                   Variant="Variant.Filled"
                                                   Disabled="_isSalaryGenerated"
                                                   OnClick=" ()=> GenerateMonthlyInvoicesAsync()">
                                    </MudIconButton>
                                </MudTooltip>
                            </MudPaper>

                        </MudItem>
                    </MudGrid>

                </ToolBarContent>
                <Columns>

                    <PropertyColumn Property="x=>x.InvoiceNumber"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.InvoiceNumber))" />
                    <PropertyColumn Property="x=>x.ProjectName"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.ProjectName))" />
                    <PropertyColumn Property="x=>x.InvoiceDate"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.InvoiceDate))" />
                    <PropertyColumn Property="x=>x.TotalHours"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.TotalHours))" />
                    <PropertyColumn Property="x=>x.TotalAmount"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.TotalAmount))" />
                    <PropertyColumn Property="x=>x.StartDate"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.StartDate))" />
                    <PropertyColumn Property="x=>x.EndDate"
                                    Title="@GetDisplayName(typeof(InvoiceDTO), nameof(InvoiceDTO.EndDate))" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="invoice">
                            <MudStack Row>
                                <MudTooltip Text="View Invoice"
                                            Color="Color.Info"
                                            Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye"
                                                   Color="Color.Info" Variant="Variant.Filled"
                                                   OnClick="() => ViewInvoiceAsync(invoice.Item)"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Edit Invoice"
                                            Color="Color.Primary"
                                            Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Primary"
                                                   Variant="Variant.Filled"
                                                   OnClick="() => EditInvoiceAsync(invoice.Item)"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Download Invoice"
                                            Color="Color.Success"
                                            Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.GetApp"
                                                   Color="Color.Success"
                                                   Variant="Variant.Filled"
                                                   OnClick="() => DownloadPdf(invoice.Item)"></MudIconButton>
                                </MudTooltip>
                                <MudTooltip Text="Email Invoice"
                                            Color="Color.Secondary"
                                            Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Email"
                                                   Color="Color.Secondary"
                                                   Variant="Variant.Filled"
                                                   OnClick="() => EditInvoiceAsync(invoice.Item)"></MudIconButton>
                                </MudTooltip>
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="InvoiceDTO" />
                </PagerContent>
            </MudDataGrid> 
        }

    </MudItem>
@*     <MudItem xs="12" sm="12" md="12" lg="12" Style="text-align: center;">
        <MudPaper Class="d-flex align-center gap-2" Style="padding: 8px;">
            <MudText><b>Salary Status : </b>@MonthlySalarySummary.StatusName | </MudText>
            <MudText><b>Created Date : </b>@MonthlySalarySummary.CreatedDate | </MudText>
            <MudText><b>Created User : </b>@MonthlySalarySummary.CreatedByUser | </MudText>
            <MudText><b>Updated Date : </b>@MonthlySalarySummary.UpdatedDate | </MudText>
            <MudText><b>Update User : </b>@MonthlySalarySummary.UpdatedByUser</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12" md="12" lg="12" Style="text-align: center;">
        <MudButton Variant="Variant.Filled" Color="Color.Info" StartIcon="@Icons.Material.Filled.Chat">
            Comments
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   Disabled="MonthlySalarySummary.Status != Domain.Enum.MonthlySalaryStatus.Generated && MonthlySalarySummary.Status != Domain.Enum.MonthlySalaryStatus.SubmittedForRevised"
                   StartIcon="@Icons.Material.Filled.CheckCircle"
                   OnClick="() => SubmitForApprovalAsync()">
            Submit For Approval
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   Disabled="MonthlySalarySummary.Status != Domain.Enum.MonthlySalaryStatus.Approved"
                   StartIcon="@Icons.Material.Filled.CheckCircle"
                   OnClick="() => MaskAsSubmittedToBankAsync()">
            Mark As Submitted To Bank
        </MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Success"
                   Disabled="MonthlySalarySummary.Status != Domain.Enum.MonthlySalaryStatus.SubmittedToBank"
                   StartIcon="@Icons.Material.Filled.CheckCircle"
                   OnClick="() => MaskAsTransferredAsync()">
            Mark As Transferred To Employee Account
        </MudButton>
    </MudItem> *@
</MudGrid>

@code {
    private string _searchString = "";
    private bool _loading = false;
    private bool _isMasterDataLoaded = false;
    private bool _isSalaryGenerated = false;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback<bool> OnDialogClosed { get; set; }

    private MudDataGrid<InvoiceDTO> _dataGrid;

    private IEnumerable<DropDownDTO> CompanyYears = new List<DropDownDTO>();
    private DropDownDTO SelectedCompanyYear = new DropDownDTO();

    private IEnumerable<DropDownDTO> Months = new List<DropDownDTO>();
    private DropDownDTO SelectedMonth = new DropDownDTO();


    //private EmployeeMonthlySalaryStatusDTO MonthlySalarySummary = new EmployeeMonthlySalaryStatusDTO();


    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await LoadMasterDataAsync();
    }

    private async Task LoadMasterDataAsync()
    {
        try
        {
            // Load your master data
            CompanyYears = await MasterDataService.GetAvailableCompanyYears();
            SelectedCompanyYear = CompanyYears.FirstOrDefault();

            Months = MasterDataService.GetAvailableMonths();
            SelectedMonth = Months.FirstOrDefault();

            _isMasterDataLoaded = true;

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading master data: {ex.Message}");
        }
    }

    private async Task<GridData<InvoiceDTO>> LoadData(GridState<InvoiceDTO> state)
    {
        _loading = true;

        try
        {
            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Extract sorting parameters
            var sortBy = state.SortDefinitions.FirstOrDefault()?.SortBy;
            var sortDirection = state.SortDefinitions.FirstOrDefault()?.Descending == true ? false : true;

            var result = await InvoiceService.GetAllInvoiceAsync(
                                    page,
                                    pageSize,
                                    SelectedCompanyYear.Id,
                                    (Month)SelectedMonth.Id);

            if (result.Items == null || !result.Items.Any())
            {
                _isSalaryGenerated = false;
                Snackbar.Add("No data found for the selected filters.", Severity.Warning);
            }
            else
            {
                _isSalaryGenerated = true;
            }

            return new GridData<InvoiceDTO>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task EditInvoiceAsync(InvoiceDTO invoice)
    {
        var parameters = new DialogParameters
        {
            { "InvoiceId", invoice.Id },
            { "IsReadOnly", false },
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEdiInvoiceyDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditInvoiceDialog>($"Edit Monthly Invoice For For : {invoice.ProjectName}", parameters, _maxWidth);
    }

    private async Task ViewInvoiceAsync(InvoiceDTO invoice)
    {
        var parameters = new DialogParameters
        {
            { "InvoiceId", invoice.Id },
            { "IsReadOnly", true },
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEdiInvoiceyDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditInvoiceDialog>($"Edit Monthly Invoice For For : {invoice.ProjectName}", parameters, _maxWidth);
    }

    private async Task HandleEdiInvoiceyDialogClosedAsync(bool result)
    {
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private async Task CompanyYearChanged(DropDownDTO changedValue)
    {
        SelectedCompanyYear = changedValue;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private async Task MonthChanged(DropDownDTO changedValue)
    {
        SelectedMonth = changedValue;

        //MonthlySalarySummary = await UserSalaryService.GetEmployeeMonthlySalaryStatus(SelectedCompanyYear.Id, SelectedMonth.Id);

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }


    private async Task GenerateMonthlyInvoicesAsync()
    {
        LoadingService.Show();
        var result = await InvoiceService.GenerateMonthlyInvoicesAsync(SelectedCompanyYear.Id, SelectedMonth.Id);
        if (result.Flag)
        {
            _loading = false;
            _dataGrid?.ReloadServerData();
            StateHasChanged();
        }
        await ShowSnackbar(result);
        LoadingService.Hide();
    }

    private async Task ShowSnackbar(GeneralResponseDTO result)
    {
        if (result.Flag)
        {
            Snackbar.Add(result.Message, Severity.Success, c => c.SnackbarVariant = Variant.Filled);
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
        }
    }

    private async Task DownloadPdf(InvoiceDTO invoice)
    {
        // Logic to handle PDF download
        var documentDto = await InvoiceService.DownloadInvoiceAsync(invoice.Id);

        var base64Data = Convert.ToBase64String(documentDto.FileArray);

        await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", documentDto.FileName, base64Data);
    }

    private string GetDisplayNameByPropertyInfro(PropertyInfo prop)
    {
        var displayAttribute = prop.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? prop.Name;
    }

    private string GetDisplayName(Type type, string propertyName)
    {
        var prop = type.GetProperty(propertyName);
        var displayAttribute = prop?.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? propertyName;
    }
}
