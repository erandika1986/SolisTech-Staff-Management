@page "/Appraisal/MyAssignedAppraisal"

@using Microsoft.AspNetCore.Authorization
@using StaffApp.Application.DTOs.Appraisal
@using StaffApp.Application.DTOs.Common
@using StaffApp.Application.Services
@using System.Reflection
@using System.ComponentModel.DataAnnotations

@inject IMasterDataService MasterDataService
@inject IAppraisalService AppraisalService
@inject ISnackbar Snackbar
@inject IDialogService Dialog
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>My Assigned Appraisals</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4" Style="padding:4px !important;">
    @if (!_isMasterDataLoaded)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        <MudText>Loading master data...</MudText>
    }
    else
    {
        <!-- Page Header -->
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <div class="d-flex justify-space-between align-center flex-wrap">
                <div>
                    <MudText Typo="Typo.h4" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Class="mr-3" />
                        Appraisal Management
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Manage employee appraisal for selected company year.
                    </MudText>
                </div>
            </div>
        </MudPaper>

        <!-- Filters Section -->
        <MudPaper Class="pa-4 mb-4" Elevation="1">
            <MudGrid AlignItems="Center">
                <!-- Search -->
                <!-- Category Filter -->
                <MudItem xs="12" sm="6" md="3" lg="5">
                    <MudSelect T="DropDownDTO" ToStringFunc="(item) => item is not null ? item.Name : string.Empty" Label="Company Year" Variant="Variant.Outlined" Margin="Margin.Dense" Value="SelectedCompanyYear" ValueChanged="@CompanyYearChanged">
                        @foreach (var companyYear in CompanyYears)
                        {
                            <MudSelectItem T="DropDownDTO" Value="@companyYear">@companyYear.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Actions -->
                <MudItem xs="12" sm="6" md="9" lg="7" Class="d-flex justify-end">
                    @*                     <MudButtonGroup Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="d-flex justify-content-end">
 
                        <MudButton StartIcon="@(!_isDataGenerated ? Icons.Material.Filled.PlayArrow : Icons.Material.Filled.Refresh)"
                                   Color="Color.Success" Variant="Variant.Filled" OnClick="() => GenerateAppraisalPeriodData()">
                            @(!_isDataGenerated ? "Generate" : "Regenerate")
                        </MudButton>
                    </MudButtonGroup> *@
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudItem xs="12" sm="12" md="12" lg="12">
            <MudDataGrid @ref="_dataGrid" T="UserAppraisalSummaryDTO" ServerData="@(LoadData)" Sortable="true"
                         Filterable="false"
                         Hideable="true"
                         Hover="true"
                         Striped="true"
                         Elevation="25"
                         Loading="@_loading">
                <Columns>
                    <PropertyColumn Property="x => x.UserFullName" Title="@GetDisplayName(typeof(UserAppraisalSummaryDTO), nameof(UserAppraisalSummaryDTO.UserFullName))" />
                    <PropertyColumn Property="x => x.AppraisalPeriod" Title="@GetDisplayName(typeof(UserAppraisalSummaryDTO), nameof(UserAppraisalSummaryDTO.AppraisalPeriod))" />
                    <PropertyColumn Property="x => x.ReviewerName" Title="@GetDisplayName(typeof(UserAppraisalSummaryDTO), nameof(UserAppraisalSummaryDTO.ReviewerName))" />
                    <PropertyColumn Property="x => x.OverallRating" Title="@GetDisplayName(typeof(UserAppraisalSummaryDTO), nameof(UserAppraisalSummaryDTO.OverallRating))" />
                    <PropertyColumn Property="x => x.Status" Title="@GetDisplayName(typeof(UserAppraisalSummaryDTO), nameof(UserAppraisalSummaryDTO.Status))" />
                    <PropertyColumn Property="x => x.Comments" Title="@GetDisplayName(typeof(UserAppraisalSummaryDTO), nameof(UserAppraisalSummaryDTO.Comments))" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate Context="appraisal">
                            <MudStack Row>
                                @if(appraisal.Item.Status == "Completed")
                                {
                                    <MudTooltip Text="View" Color="Color.Info" Placement="Placement.Top">
                                        <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Info" Variant="Variant.Filled" OnClick="() => View(appraisal.Item)"></MudIconButton>
                                    </MudTooltip>
                                }
                                else
                                {
                                    <MudTooltip Text="Edit" Color="Color.Info" Placement="Placement.Top">
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Variant="Variant.Filled" OnClick="() => Edit(appraisal.Item)"></MudIconButton>
                                    </MudTooltip>
                                }
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>

                </Columns>
                <PagerContent>
                    <MudDataGridPager T="UserAppraisalSummaryDTO" />
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    }
</MudContainer>

@code {
    //private List<DonationSummaryDTO> Donations = new();
    private bool _loading = false;
    private bool _isMasterDataLoaded = false;
    private bool _isDataGenerated = false;

    private int TotalRecords = 0;
    private MudDataGrid<UserAppraisalSummaryDTO> _dataGrid;

    private IEnumerable<DropDownDTO> CompanyYears = new List<DropDownDTO>();
    private DropDownDTO SelectedCompanyYear = new DropDownDTO();

    protected override async Task OnInitializedAsync()
    {
        _isMasterDataLoaded = false;
        await LoadMasterData();
    }

    private async Task LoadMasterData()
    {
        // Load your master data
        CompanyYears = await MasterDataService.GetAvailableCompanyYears();
        SelectedCompanyYear = CompanyYears.FirstOrDefault();

        _isMasterDataLoaded = true;
        StateHasChanged();
    }

    private async Task CompanyYearChanged(DropDownDTO value)
    {
        SelectedCompanyYear = value;
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private async Task Edit(UserAppraisalSummaryDTO appraisal)
    {
        var parameters = new DialogParameters<EditAssignedEmployeeAppraisalDialog>
        {
           { x => x.EmployeeAppraisalId, appraisal.Id },
           { x => x.EmployeeName, appraisal.UserFullName },
           { x => x.IsReadOnly, false }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            BackdropClick = true
        };
        var dialog = await Dialog.ShowAsync<EditAssignedEmployeeAppraisalDialog>($"Employee Performance Appraisal", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled || result.Canceled)
        {
            _dataGrid?.ReloadServerData();
            StateHasChanged();
        }
    }


    private async Task View(UserAppraisalSummaryDTO appraisal)
    {
        var parameters = new DialogParameters<EditAssignedEmployeeAppraisalDialog>
        {
           { x => x.EmployeeAppraisalId, appraisal.Id },
           { x => x.EmployeeName, appraisal.UserFullName },
           { x => x.IsReadOnly, true }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraLarge,
            FullWidth = true,
            BackdropClick = true
        };
        var dialog = await Dialog.ShowAsync<EditAssignedEmployeeAppraisalDialog>($"Employee Performance Appraisal", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled || result.Canceled)
        {
            _dataGrid?.ReloadServerData();
            StateHasChanged();
        }
    }


    private async Task<GridData<UserAppraisalSummaryDTO>> LoadData(GridState<UserAppraisalSummaryDTO> state)
    {
        _loading = true;

        try
        {
            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Extract sorting parameters
            var sortBy = state.SortDefinitions.FirstOrDefault()?.SortBy;
            var sortDirection = state.SortDefinitions.FirstOrDefault()?.Descending == true ? false : true;

            var result = await AppraisalService.GetMyAssignedAppraisal(SelectedCompanyYear.Id);

            return new GridData<UserAppraisalSummaryDTO>
            {
                Items = result,
                TotalItems = result.Count
            };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task ShowSnackbar(GeneralResponseDTO result)
    {
        if (result.Flag)
        {
            Snackbar.Add(result.Message, Severity.Success, c => c.SnackbarVariant = Variant.Filled);
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
        }
    }


    private string GetDisplayNameByPropertyInfro(PropertyInfo prop)
    {
        var displayAttribute = prop.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? prop.Name;
    }

    private string GetDisplayName(Type type, string propertyName)
    {
        var prop = type.GetProperty(propertyName);
        var displayAttribute = prop?.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? propertyName;
    }
}
