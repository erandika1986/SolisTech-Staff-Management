@page "/TimeCard/MyTimeCardList"
@using Microsoft.AspNetCore.Authorization
@using StaffApp.Application.DTOs.TimeCard
@using StaffApp.Application.Extensions.Constants
@using StaffApp.Application.Services
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using StaffApp.Components.Shared

@inject ITimeCardService TimeCardService
@inject IDialogService Dialog

@attribute [Authorize]
<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Manage Employee Leave Submissions</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12">

                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="12">
                            <MudGrid>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                <MudDatePicker xs="12" sm="6" Label="From Date" Date="StartDate" DateChanged="StartDateChanged" />
                                </MudItem>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                <MudDatePicker xs="12" sm="6" Label="To Date" Date="EndDate" DateChanged="EndDataChanged" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12">
                        <MudDataGrid @ref="_dataGrid" T="BasicTimeCardDTO" ServerData="@(LoadData)" Sortable="true"
                                         Filterable="false"
                                         Hideable="true"
                                         Hover="true"
                                         Striped="true"
                                         Elevation="25"
                                         Loading="@_loading">
                                <Columns>
                                <PropertyColumn Property="x=>x.Id" Title="@GetDisplayName(typeof(BasicTimeCardDTO), nameof(BasicTimeCardDTO.Id))" />
                                <PropertyColumn Property="x=>x.Date" Title="@GetDisplayName(typeof(BasicTimeCardDTO), nameof(BasicTimeCardDTO.Date))" />
                                <PropertyColumn Property="x=>x.StatusName" Title="@GetDisplayName(typeof(BasicTimeCardDTO), nameof(BasicTimeCardDTO.StatusName))" />
                                <PropertyColumn Property="x=>x.NumberOfProjects" Title="@GetDisplayName(typeof(BasicTimeCardDTO), nameof(BasicTimeCardDTO.NumberOfProjects))" />
                                <PropertyColumn Property="x=>x.TotalHours" Title="@GetDisplayName(typeof(BasicTimeCardDTO), nameof(BasicTimeCardDTO.TotalHours))" />
                                    <TemplateColumn CellClass="d-flex justify-end">
                                        <CellTemplate Context="timeCard">
                                            <MudStack Row>
                                                <MudTooltip Text="Edit Leave Request" Color="Color.Info" Placement="Placement.Top">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Variant="Variant.Filled" OnClick="() => EditTimeCardAsync(timeCard.Item)"></MudIconButton>
                                                </MudTooltip>

                                            </MudStack>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                                <PagerContent>
                                    <MudDataGridPager T="BasicTimeCardDTO" />
                                </PagerContent>
                            </MudDataGrid>
                        </MudItem>
                    </MudGrid>

                

            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    private string _searchString = "";
    private bool _loading = false;
    private MudDataGrid<BasicTimeCardDTO> _dataGrid;

    private DateTime StartDate = DateTime.Now.AddDays(-10);
    private DateTime EndDate = DateTime.Now;

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {

    }

    private void StartDateChanged(DateTime? fromDate)
    {

        StartDate = fromDate.Value;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private void EndDataChanged(DateTime? toDate)
    {
        EndDate = toDate.Value;
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private async Task<GridData<BasicTimeCardDTO>> LoadData(GridState<BasicTimeCardDTO> state)
    {
        _loading = true;

        try
        {
            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Call the service with parameters
            var result = await TimeCardService.GetAllTimeCardAsync(
                page,
                pageSize,
                StartDate,
                EndDate
            );

            // Return the result in GridData format
            return new GridData<BasicTimeCardDTO>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task EditTimeCardAsync(BasicTimeCardDTO timeCard)
    {
        var parameters = new DialogParameters
        {
            { "TimeCardId", timeCard.Id },
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEditDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditTimeCardDialog>($"Edit Time Card", parameters, _maxWidth);
    }

    private async Task AddNewTimeCardAsync()
    {
        var parameters = new DialogParameters
        {
            { "TimeCardId", ApplicationConstants.Zero },
            { "IsReadOnly", false },
            { "IsApprovalView", false },
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEditDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditTimeCardDialog>($"Add a new time card", parameters, _maxWidth);
    }

    private Task DeleteTimeCardAsync(BasicTimeCardDTO timeCard)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "Id", timeCard.Id.ToString() },
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error },
             { "OnDialogClosed", EventCallback.Factory.Create<string>(this, HandleDeleteConfirmationDialogClosedAsync)  }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return Dialog.ShowAsync<ConfirmationDialog>("Delete", parameters, options);
    }

    private async Task HandleEditDialogClosedAsync(bool result)
    {
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private async Task HandleDeleteConfirmationDialogClosedAsync(string id)
    {
        var result = await TimeCardService.DeleteTimeCardAsync(int.Parse(id));

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private string GetDisplayNameByPropertyInfro(PropertyInfo prop)
    {
        var displayAttribute = prop.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? prop.Name;
    }

    private string GetDisplayName(Type type, string propertyName)
    {
        var prop = type.GetProperty(propertyName);
        var displayAttribute = prop?.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? propertyName;
    }
}
