@page "/EmployeeLeave/MyLeaveList"
@using Microsoft.AspNetCore.Authorization
@using StaffApp.Application.DTOs.Common
@using StaffApp.Application.DTOs.EmploymentLeave
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using StaffApp.Application.Extensions.Constants
@using StaffApp.Application.Services
@using StaffApp.Components.Shared
@using StaffApp.Domain.Enum
@using StaffApp.Infrastructure.Services

@inject ILeaveRequestService LeaveRequestService
@inject ILeaveAllocationService LeaveAllocationService
@inject IMasterDataService MasterDataService
@inject IDialogService Dialog
@inject LoadingService LoadingService
@inject ISnackbar Snackbar

@attribute [Authorize]
    @if (LeaveDashboardData.LeaveTypeSummaries.Count>0)
{
    <MudGrid Gutter="true">

        @foreach (var dashboardItem in LeaveDashboardData.LeaveTypeSummaries)
        {
            <MudItem xs="12" sm="6" md="2" lg="2">
@*                 <MudPaper Elevation="2" Class="p-4">
                    <MudText Typo="Typo.h6" Class="p-4 d-flex align-center justify-center"> @dashboardItem.LeaveTypeName</MudText>
                    <MudText Color="Color.Primary" Class="p-4 d-flex align-center justify-center">Total Leaves : @dashboardItem.TotalLeaveDays</MudText>
                    <MudText Color="Color.Primary" Class="p-4 d-flex align-center justify-center">Remaining Leaves : @dashboardItem.RemainingLeaveDays</MudText>
                    <MudText Color="Color.Primary" Class="p-4 d-flex align-center justify-center">Approved Leaves : @dashboardItem.ApprovedLeaveDays</MudText>
                    <MudText Color="Color.Primary" Class="p-4 d-flex align-center justify-center">Pending Leaves :@dashboardItem.PendingLeaveDays</MudText>
                    <MudText Color="Color.Primary" Class="p-4 d-flex align-center justify-center">Rejected Leaves :@dashboardItem.RejectedLeaveDays</MudText>
                </MudPaper> *@
            <MudCard Class="pa-4" Style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <MudCardContent>
                    <div class="d-flex align-center justify-space-between mb-3">
                            <MudIcon Icon="Icons.Material.Filled.CalendarMonth" Size="Size.Large" Style="opacity: 0.9; margin-right: 8px;" />
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary" Text="true" Style="opacity: 0.8; font-weight: 300; letter-spacing: 0.5px;">@dashboardItem.LeaveTypeName</MudChip>
                    </div>
                        <MudText Typo="Typo.h6" Class="mb-2">@dashboardItem.LeaveTypeName</MudText>
                        <MudText Typo="Typo.h5" Class="mb-3">@dashboardItem.TotalLeaveDays Leaves days</MudText>
                    
                    <MudDivider Class="mb-3" />
                    
                    <div class="d-flex justify-space-between mb-2">
                        <MudText Typo="Typo.body2">Remaining:</MudText>
                            <MudText Typo="Typo.body2"><strong>@dashboardItem.RemainingLeaveDays</strong></MudText>
                    </div>
                    <div class="d-flex justify-space-between mb-2">
                        <MudText Typo="Typo.body2">Approved:</MudText>
                            <MudText Typo="Typo.body2" Style="color: #4caf50;"><strong>@dashboardItem.ApprovedLeaveDays</strong></MudText>
                    </div>
                    <div class="d-flex justify-space-between mb-2">
                        <MudText Typo="Typo.body2">Pending:</MudText>
                            <MudText Typo="Typo.body2" Style="color: #ff9800;"><strong>@dashboardItem.PendingLeaveDays</strong></MudText>
                    </div>
                    <div class="d-flex justify-space-between">
                        <MudText Typo="Typo.body2">Rejected:</MudText>
                            <MudText Typo="Typo.body2" Style="color: #f44336;"><strong>@dashboardItem.RejectedLeaveDays</strong></MudText>
                    </div>
                </MudCardContent>
            </MudCard>
            </MudItem>
        }
    </MudGrid>
}


<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">My Leave Submissions</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudTooltip Text="Apply For New Leave Request" Color="Color.Primary" Placement="Placement.Top">
                    <MudIconButton Icon="@Icons.Material.Filled.AddTask" Color="Color.Primary" Variant="Variant.Filled" OnClick="() => AddNewLeaveRequestAsync()"></MudIconButton>
                </MudTooltip>
            </MudItem>
            <MudItem xs="12" sm="12" md="12" lg="12">
                @if (!_isMasterDataLoaded)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText>Loading master data...</MudText>
                }
                else
                {
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="12">
                            <MudGrid>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                    <MudSelect T="DropDownDTO" Label="Year" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" Value="SelectedCompanyYear" ValueChanged="@CompanyYearChanged">
                                        @foreach (var companyYear in CompanyYears)
                                        {
                                            <MudSelectItem T="DropDownDTO" Value="@companyYear">@companyYear.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                    <MudDatePicker xs="12" sm="6" Label="From Date" Date="StartDate" DateChanged="FromDateChanged" />
                                </MudItem>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                    <MudDatePicker xs="12" sm="6" Label="To Date" Date="EndDate" DateChanged="ToDataChanged" />
                                </MudItem>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                    <MudSelect T="DropDownDTO" Label="Leave Type" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" Value="SelectedLeaveType" ValueChanged="@LeaveTypeChanged">
                                        @foreach (var leaveType in LeaveTypes)
                                        {
                                            <MudSelectItem T="DropDownDTO" Value="@leaveType">@leaveType.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="12" md="2" lg="2">
                                    <MudSelect T="DropDownDTO" Label="Leave Status" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" Value="SelectedLeaveStatus" ValueChanged="@LeaveStatusChanged">
                                        @foreach (var eaveStatus in LeaveStatuses)
                                        {
                                            <MudSelectItem T="DropDownDTO" Value="@eaveStatus">@eaveStatus.Name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12">
                            <MudDataGrid @ref="_dataGrid" T="BasicEmployeeLeaveRequestDTO" ServerData="@(LoadData)" Sortable="true"
                            Filterable="false"
                            Hideable="true"
                            Hover="true"
                            Striped="true"
                            Elevation="25"
                            Loading="@_loading">
                                <Columns>
                                    <PropertyColumn Property="x=>x.LeaveType" Title="@GetDisplayName(typeof(BasicEmployeeLeaveRequestDTO), nameof(BasicEmployeeLeaveRequestDTO.LeaveType))" />
                                    <PropertyColumn Property="x=>x.StartDate" Title="@GetDisplayName(typeof(BasicEmployeeLeaveRequestDTO), nameof(BasicEmployeeLeaveRequestDTO.StartDate))" />
                                    <PropertyColumn Property="x=>x.EndDate" Title="@GetDisplayName(typeof(BasicEmployeeLeaveRequestDTO), nameof(BasicEmployeeLeaveRequestDTO.EndDate))" />
                                    <PropertyColumn Property="x=>x.NumberOfDays" Title="@GetDisplayName(typeof(BasicEmployeeLeaveRequestDTO), nameof(BasicEmployeeLeaveRequestDTO.NumberOfDays))" />
                                    <PropertyColumn Property="x=>x.LeaveDuration" Title="@GetDisplayName(typeof(BasicEmployeeLeaveRequestDTO), nameof(BasicEmployeeLeaveRequestDTO.LeaveDuration))" />
                                    <PropertyColumn Property="x=>x.CurrentStatus" Title="@GetDisplayName(typeof(BasicEmployeeLeaveRequestDTO), nameof(BasicEmployeeLeaveRequestDTO.CurrentStatus))" />
                                    <TemplateColumn CellClass="d-flex justify-end">
                                        <CellTemplate Context="leave">
                                            <MudStack Row>
                                                <MudTooltip Text="View My Leave Request" Color="Color.Info" Placement="Placement.Top">
                                                    <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Info" Variant="Variant.Filled" OnClick="() => ViewLeaveRequestAsync(leave.Item)"></MudIconButton>
                                                </MudTooltip>
                                                <MudTooltip Text="Edit My Leave" Color="Color.Primary" Placement="Placement.Top">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Filled" Disabled="leave.Item.Status!=Domain.Enum.LeaveStatus.Pending" OnClick="() => EditLeaveRequestAsync(leave.Item)"></MudIconButton>
                                                </MudTooltip>
                                                <MudTooltip Text="Cancel My Leave Request" Color="Color.Error" Placement="Placement.Top">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" Disabled="leave.Item.Status == LeaveStatus.Approved || leave.Item.Status == LeaveStatus.Rejected || leave.Item.Status == LeaveStatus.Deleted" OnClick="() => DeleteLeaveRequestAsync(leave.Item)"></MudIconButton>
                                                </MudTooltip>
                                            </MudStack>
                                        </CellTemplate>
                                    </TemplateColumn>
                                </Columns>
                                <PagerContent>
                                    <MudDataGridPager T="BasicEmployeeLeaveRequestDTO" />
                                </PagerContent>
                            </MudDataGrid>
                        </MudItem>
                    </MudGrid>

                }

            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    private string _searchString = "";
    private bool _loading = false;
    private bool _isMasterDataLoaded = false;
    private MudDataGrid<BasicEmployeeLeaveRequestDTO> _dataGrid;

    private LeaveDashboardDTO LeaveDashboardData = new LeaveDashboardDTO();

    private List<BasicEmployeeLeaveRequestDTO> LeaveRequests { get; set; } = new List<BasicEmployeeLeaveRequestDTO>();

    private DateTime? StartDate = DateTime.Now.AddDays(-14);
    private DateTime? EndDate = DateTime.Now;

    private IEnumerable<DropDownDTO>  LeaveTypes= new List<DropDownDTO>();
    private DropDownDTO SelectedLeaveType = new DropDownDTO();

    private IEnumerable<DropDownDTO> CompanyYears = new List<DropDownDTO>();
    private DropDownDTO SelectedCompanyYear = new DropDownDTO();

    private IEnumerable<DropDownDTO> LeaveStatuses = new List<DropDownDTO>();
    private DropDownDTO SelectedLeaveStatus = new DropDownDTO();

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    protected override async Task OnInitializedAsync()
    {
        await GetMyLeaveDashboardDataAsync();
        await LoadMasterDataAsync();

    }

    private async Task LoadMasterDataAsync()
    {
        try
        {
            // Load your master data
            LeaveTypes = await MasterDataService.GetLeaveTypes(true);
            SelectedLeaveType = LeaveTypes.FirstOrDefault();

            CompanyYears = await MasterDataService.GetAvailableCompanyYears();
            SelectedCompanyYear = CompanyYears.FirstOrDefault();

            LeaveStatuses = MasterDataService.GetLeaveStatuses(true);
            SelectedLeaveStatus = LeaveStatuses.FirstOrDefault();

            _isMasterDataLoaded = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading master data: {ex.Message}");
        }
    }

    private async Task GetMyLeaveDashboardDataAsync()
    {
        LeaveDashboardData = await LeaveAllocationService.GetMyLeaveDashboardData();
    }

    private void CompanyYearChanged(DropDownDTO changedValue)
    {
        SelectedCompanyYear = changedValue;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private void LeaveTypeChanged(DropDownDTO changedValue)
    {
        SelectedLeaveType = changedValue;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private void LeaveStatusChanged(DropDownDTO changedValue)
    {
        SelectedLeaveStatus = changedValue;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private void FromDateChanged(DateTime? fromDate){

        StartDate = fromDate;

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    private void ToDataChanged(DateTime? toDate)
    {
        EndDate = toDate;
        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }


    private async Task<GridData<BasicEmployeeLeaveRequestDTO>> LoadData(GridState<BasicEmployeeLeaveRequestDTO> state)
    {
        _loading = true;

        try
        {
            // Extract paging parameters
            var page = state.Page + 1; // MudBlazor uses 0-based indexing
            var pageSize = state.PageSize;

            // Extract sorting parameters
            var sortBy = state.SortDefinitions.FirstOrDefault()?.SortBy;
            var sortDirection = state.SortDefinitions.FirstOrDefault()?.Descending == true ? false : true;

            var result = await LeaveRequestService.GetMyLeaveRequests(
                                    page,
                                    pageSize,
                                    SelectedCompanyYear.Id,
                                    SelectedLeaveType.Id,
                                    SelectedLeaveStatus.Id,
                                    StartDate,
                                    EndDate);

            return new GridData<BasicEmployeeLeaveRequestDTO>
                {
                    Items = result.Items,
                    TotalItems = result.TotalItems
                };
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private async Task EditLeaveRequestAsync(BasicEmployeeLeaveRequestDTO request)
    {
        var parameters = new DialogParameters
        {
            { "LeaveRequestId", request.Id },
            { "IsDisabled", false},
            { "IsApprovalView", false},
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEditDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditLeaveRequestDialog>($"Edit My Leave Request", parameters, _maxWidth);
    }

    private async Task DeleteLeaveRequestAsync(BasicEmployeeLeaveRequestDTO request)
    {
        var parameters = new DialogParameters
        {
            { "Title", $"Delete Leave Request from {request.EmployeeName}" },
            { "ContentText", "Are you sure you want to perform this operation?." },
            { "ConfirmText", "Reject" },
            { "CancelText", "Cancel" },
            { "Color", Color.Error },
            { "Icon", Icons.Material.Filled.Delete },
            { "ShowCommentInput", true },
            { "CommentRequired", true }
        };

        var dialog = await Dialog.ShowAsync<ConfirmationWithCommentDialog>("", parameters, _maxWidth);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            LoadingService.Show();

            var comment = result.Data as string;

            var deleteResult = await LeaveRequestService.DeleteLeaveRequestAsync(request.Id, comment);

            LeaveDashboardData = await LeaveAllocationService.GetMyLeaveDashboardData();
            
            await ShowSnackbar(deleteResult);

            _dataGrid?.ReloadServerData();
            StateHasChanged();

            LoadingService.Hide();
        }
    }

    private async Task AddNewLeaveRequestAsync()
    {
        var parameters = new DialogParameters
        {
            { "LeaveRequestId", ApplicationConstants.Zero },
            { "IsDisabled", false},
            { "IsApprovalView", false},
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEditDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditLeaveRequestDialog>($"Apply Leave Request", parameters, _maxWidth);
    }

    private async Task ViewLeaveRequestAsync(BasicEmployeeLeaveRequestDTO request)
    {
        var parameters = new DialogParameters
        {
            { "LeaveRequestId", request.Id },
            { "IsDisabled", true},
            { "IsApprovalView", false},
            { "OnDialogClosed", EventCallback.Factory.Create<bool>(this, HandleEditDialogClosedAsync)  }
        };
        await Dialog.ShowAsync<EditLeaveRequestDialog>($"Manage Leave Request From : {request.EmployeeName}", parameters, _maxWidth);
    }

    private async Task HandleEditDialogClosedAsync(bool result)
    {
        LeaveDashboardData = await LeaveAllocationService.GetMyLeaveDashboardData();

        _dataGrid?.ReloadServerData();
        StateHasChanged();
    }

    async Task ShowSnackbar(GeneralResponseDTO result)
    {
        if (result.Flag)
        {
            Snackbar.Add(result.Message, Severity.Success, c => c.SnackbarVariant = Variant.Filled);
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error, c => c.SnackbarVariant = Variant.Filled);
        }
    }

    string GetDisplayNameByPropertyInfro(PropertyInfo prop)
    {
        var displayAttribute = prop.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? prop.Name;
    }

    string GetDisplayName(Type type, string propertyName)
    {
        var prop = type.GetProperty(propertyName);
        var displayAttribute = prop?.GetCustomAttribute<DisplayAttribute>();
        return displayAttribute?.Name ?? propertyName;
    }


    // Summary data
    private int TotalLeaves = 24;
    private int ApprovedLeaves = 16;
    private int PendingLeaves = 4;
    private int RejectedLeaves = 4;

    // Chart data
    private string[] UsageLabels = new[] { "Approved", "Pending", "Rejected" };
    private double[] UsageData => new[] { (double)ApprovedLeaves, PendingLeaves, RejectedLeaves };

    // Upcoming leaves
    private List<LeaveEntry> UpcomingLeaves = new()
    {
        new LeaveEntry { Date = DateTime.Now.AddDays(2), Reason = "Family Event" },
        new LeaveEntry { Date = DateTime.Now.AddDays(10), Reason = "Vacation" }
    };

    // Leave history
    private List<LeaveHistoryEntry> LeaveHistory = new()
    {
        new LeaveHistoryEntry { Date = DateTime.Now.AddDays(-15), Type = "Casual", Status = "Approved", Reason = "Medical" },
        new LeaveHistoryEntry { Date = DateTime.Now.AddDays(-5), Type = "Casual", Status = "Rejected", Reason = "Late Request" },
        new LeaveHistoryEntry { Date = DateTime.Now.AddDays(-2), Type = "Casual", Status = "Pending", Reason = "Personal" }
    };

    private Color GetStatusColor(string status) => status switch
    {
        "Approved" => Color.Success,
        "Pending" => Color.Warning,
        "Rejected" => Color.Error,
        _ => Color.Default
    };

    private void RequestLeave()
    {
        // Navigate to leave request form or show dialog
    }

    class LeaveEntry
    {
        public DateTime Date { get; set; }
        public string Reason { get; set; }
    }

    class LeaveHistoryEntry
    {
        public DateTime Date { get; set; }
        public string Type { get; set; }
        public string Status { get; set; }
        public string Reason { get; set; }
    }
}
