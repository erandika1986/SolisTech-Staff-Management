@using StaffApp.Application.DTOs.User
@using StaffApp.Application.Extensions.Constants
@using StaffApp.Application.Services

@inject IRoleService  RoleService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-2">
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudGrid>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField Variant="Variant.Outlined" Adornment="Adornment.End" T="string" Label="Role Name" @bind-Value="Role.Name" Required="true" RequiredError="Role name is required!" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudNumericField T="double"
                                                 Label="Default Hourly Rate"
                                                 Required="true" RequiredError="Default Hourly Rate is required!"
                                                 @bind-Value="Role.DefaultHourlyRate"
                                                 Variant="Variant.Outlined"
                                                 Adornment="Adornment.End"
                                                 AdornmentText="$"
                                                 Step="0.25"
                                                 Min="0"
                                                 Immediate="true"
                                                 DecimalPlaces="2" Format="0.00" />
                            </MudItem>
                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudCheckBox Variant="Variant.Outlined" Adornment="Adornment.End" Label="Is Manager Type Role" @bind-Value="Role.IsManagerTypeRole" Color="Color.Primary"></MudCheckBox>
                            </MudItem>
                        </MudGrid>

                    </MudForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                    @foreach (var error in errors)
                    {
                        <MudText Color="@Color.Error">@error</MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudPaper Class="pa-2">
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="@(!success)" Class="ml-auto">Save</MudButton>
        </MudPaper>

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string RoleId { get; set; }

    [Parameter]
    public EventCallback<bool> OnDialogClosed { get; set; }

    public RoleDTO Role { get; set; } = new();

    bool success;
    string[] errors = { };
    MudForm form;

    protected override async Task OnInitializedAsync()
    {


        if (RoleId != ApplicationConstants.EmptyGuide)
        {
            Role = await RoleService.GetRoleByIdAsync(RoleId);
        }
    }

    private async Task Submit()
    {
        if(RoleId == ApplicationConstants.EmptyGuide)
        {
            var response = await RoleService.CreateRoleAsync(Role.Name, Role.IsManagerTypeRole, (decimal)Role.DefaultHourlyRate);
        }
        else
        {
            var response = await RoleService.UpdateRoleAsync(Role);
        }

        await OnDialogClosed.InvokeAsync(true);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

}
