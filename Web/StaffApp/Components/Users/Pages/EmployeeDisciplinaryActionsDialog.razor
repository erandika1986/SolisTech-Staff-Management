@using StaffApp.Application.DTOs.DisciplinaryAction
@using StaffApp.Application.Extensions.Helpers
@using StaffApp.Application.Services
@using StaffApp.Components.Shared
@using StaffApp.Infrastructure.Services

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IUserDisciplinaryService UserDisciplinaryService
@inject LoadingService LoadingService
@inject IDialogService Dialog

<PageTitle>Employee Disciplinary Actions</PageTitle>
<MudDialog>
        <TitleContent>
        <MudPaper Class="pa-4 mb-4" Elevation="2">
            <div class="d-flex justify-space-between align-center flex-wrap">
                <div>
                    <MudText Typo="Typo.h4" Class="mb-2">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-3" />
                        Disciplinary Actions For @(UserName)
                    </MudText>
                    <MudText Typo="Typo.body1" Class="mud-text-secondary">
                        Manage Employee Disciplinary Actions Here
                    </MudText>
                </div>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           Class="mt-2 mt-sm-0" OnClick="AddNewEmployeeDisciplinaryActionsDialog">
                    Add New
                </MudButton>
            </div>
        </MudPaper>
        </TitleContent>
        <DialogContent>
        <MudPaper Class="pa-0" Elevation="1">
            <!-- Groups Table -->
            <MudTable Items="@disciplinaryActions"
                      Dense="true"
                      Hover="true"
                      Striped="true"
                      Loading="@loading"
                      LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Action Type</MudTh>
                    <MudTh>Severity Level</MudTh>
                    <MudTh>Reason</MudTh>
                    <MudTh>Action Date</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ActionType">
                        <MudText Typo="Typo.body1">
                            @EnumHelper.GetEnumDescription(context.ActionType)
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="SeverityLevel">
                        <MudText Typo="Typo.body1">
                            @EnumHelper.GetEnumDescription(context.SeverityLevel)
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Reason">
                        <MudText Typo="Typo.body1">
                            @(context.Reason?.Length > 75
                                                        ? context.Reason.Substring(0, 75) + "..."
                                                        : context.Reason)
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="ActionDate">
                        <MudText Typo="Typo.body1">
                            @($"{context.ActionDate:dd MMM yyyy, hh:mm tt}")   
                        </MudText>
                    </MudTd>


                    <MudTd DataLabel="Actions" Style="text-align:center">

                        <MudTooltip Text="Edit Group Detail" Color="Color.Primary" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Primary"
                                           Variant="Variant.Filled" OnClick="() => EditDisciplinaryActionAsync(context)" />
                        </MudTooltip>

                        <MudTooltip Text="Delete Group" Color="Color.Error" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Variant="Variant.Filled" OnClick="() => DeleteDisciplinaryActionAsync(context)" />
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No disciplinary actions found. Click "Add New" to create new disciplinary action.</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
        </DialogContent>
</MudDialog>


@code {
    bool open = true;

    [Parameter] public string UserId { get; set; }

    [Parameter] public string UserName { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback<bool> OnDialogClosed { get; set; }


    private List<DisciplinaryActionDTO> disciplinaryActions = new();
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDisciplinaryActions();
    }

    private async Task LoadDisciplinaryActions()
    {
        LoadingService.Show();

        disciplinaryActions = await UserDisciplinaryService.GetByUserIdAsync(UserId);


        LoadingService.Hide();
    }

    private async Task AddNewEmployeeDisciplinaryActionsDialog()
    {
        var parameters = new DialogParameters<AddEditEmployeeDisciplinaryDialog>
        {
            { x => x.IsEdit, false },
            { x => x.UserId, UserId },
            { x => x.Id, 0 },
            // { x => x.DonationId, 0 },
            // { x => x.PreSelectedCampaignId, SelectedCampaign.Id }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditEmployeeDisciplinaryDialog>("Add New Employee Disciplinary Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDisciplinaryActions();
        }
    }

    private async Task EditDisciplinaryActionAsync(DisciplinaryActionDTO item)
    {
        var parameters = new DialogParameters<AddEditEmployeeDisciplinaryDialog>
        {
            { x => x.IsEdit, true },
            { x => x.UserId, UserId },
            { x => x.Id, item.Id},
            // { x => x.DonationId, 0 },
            // { x => x.PreSelectedCampaignId, SelectedCampaign.Id }
        };

        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = true
        };

        var dialog = await DialogService.ShowAsync<AddEditEmployeeDisciplinaryDialog>("Edit Employee Disciplinary Action", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDisciplinaryActions();
        }
    }

    private Task DeleteDisciplinaryActionAsync(DisciplinaryActionDTO item)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { "Id", item.Id.ToString() },
            { x => x.ContentText, "Do you really want to delete these records? This process cannot be undone." },
            { x => x.ButtonText, "Delete" },
            { x => x.Color, Color.Error },
             { "OnDialogClosed", EventCallback.Factory.Create<string>(this, HandleDeleteConfirmationDialogClosedAsync)  }
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        return Dialog.ShowAsync<ConfirmationDialog>("Delete", parameters, options);
    }

    private async Task HandleDeleteConfirmationDialogClosedAsync(string id)
    {
        var result = await UserDisciplinaryService.DeleteAsync(int.Parse(id));

        await LoadDisciplinaryActions();

        StateHasChanged();
    }



    private void Cancel() => MudDialog.Cancel();
}
