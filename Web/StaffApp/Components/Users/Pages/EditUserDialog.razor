@using StaffApp.Application.DTOs.Common
@using StaffApp.Application.DTOs.Department
@using StaffApp.Application.DTOs.User
@using StaffApp.Application.Extensions.Constants
@using StaffApp.Application.Extensions.Helpers
@using StaffApp.Application.Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using StaffApp.Domain.Enum
@using StaffApp.Infrastructure.Services

@inject IUserService UserService
@inject IDepartmentService DepartmentService
@inject IMasterDataService MasterDateService
@inject LoadingService LoadingService

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-2">
                    <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                        <MudGrid>

                            <MudItem xs="12" sm="12" md="12" lg="12">
                                <MudTextField T="string" Label="Full Name" @bind-Value="User.FullName" Required="true" RequiredError="Full name is required!" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField T="string" Label="Company Email" @bind-Value="User.Email" Required="true" RequiredError="Email is required!"
                                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField  T="string" Label="NIC Number" @bind-Value="User.NICNumber" Required="true" RequiredError="NIC number is required!" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField  T="string" Label="Phone Number" @bind-Value="User.PhoneNumber" Required="true" RequiredError="Phone number is required!" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudTextField  T="string" Label="Land Number" @bind-Value="User.LandNumber" Required="false" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudDatePicker xs="12" sm="6" Label="Hire Date" @bind-Date="User.HireDate" Required="true" RequiredError="Hire date is required!" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudDatePicker xs="12" sm="6" Label="Birth Date" @bind-Date="User.BirthDate" Required="true" RequiredError="Birthday is required!" />
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudSelect T="RoleDTO" Label="User Role" MultiSelection="false" @bind-Value="User.SelectedRole" Required="true" RequiredError="User role is required!">
                                    @foreach (var role in Roles)
                                    {
                                        <MudSelectItem T="RoleDTO" Value="@role">@role.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudSelect T="DropDownDTO" Label="Employment Type" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" @bind-Value="User.SelectedEmploymentType" Required="true" RequiredError="Employment type is required!">
                                    @foreach (var employmentType in EmploymentTypes)
                                    {
                                        <MudSelectItem T="DropDownDTO" Value="@employmentType">@employmentType.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudSelect T="DepartmentDTO" Label="User Departments" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="true" @bind-SelectedValues="User.Departments" Required="true" RequiredError="Department is required!">
                                    @foreach (var department in Departments)
                                    {
                                        <MudSelectItem T="DepartmentDTO" Value="@department">@department.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudSelect T="DropDownDTO" Label="Marital Status" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" @bind-Value="User.SelectedMaritalStatus">
                                    @foreach (var status in MaritalStatuses)
                                    {
                                        <MudSelectItem T="DropDownDTO" Value="@status">@status.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudSelect T="DropDownDTO" Label="Gender" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" @bind-Value="User.SelectedGender" Required="true" RequiredError="Gender is required!">
                                    @foreach (var genderType in GenderTypes)
                                    {
                                        <MudSelectItem T="DropDownDTO" Value="@genderType">@genderType.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudSelect T="DropDownDTO" Label="Company Location" ToStringFunc="(item) => item  is not null? item.Name:string.Empty" MultiSelection="false" @bind-Value="User.SelectedCompanyLocation" Required="true" RequiredError="COmpany location is required!">
                                    @foreach (var companyLocation in CompanyLocations)
                                    {
                                        <MudSelectItem T="DropDownDTO" Value="@companyLocation">@companyLocation.Name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6" md="6" lg="6">
                                <MudDatePicker xs="12" sm="6" Label="Confirmation Date" @bind-Date="User.ConfirmationDate" Required="false"/>
                            </MudItem>

                        </MudGrid>

                    </MudForm>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                    @foreach (var error in errors)
                    {
                        <MudText Color="@Color.Error">@error</MudText>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions >
        <MudPaper Class="pa-2">
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
        </MudPaper>
    </DialogActions>
</MudDialog>

@code {

    bool open = true;

    [Parameter] public string UserId { get; set; }

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public EventCallback<bool> OnDialogClosed { get; set; }

    public UserDTO User { get; set; } = new();

    public IEnumerable<RoleDTO> Roles { get; set; } = new HashSet<RoleDTO>();

    public IEnumerable<DepartmentDTO> Departments { get; set; } = new HashSet<DepartmentDTO>();

    public IEnumerable<DropDownDTO> MaritalStatuses { get; set; } = new HashSet<DropDownDTO>();

    public IEnumerable<DropDownDTO> EmploymentTypes { get; set; } = new HashSet<DropDownDTO>();

    public IEnumerable<DropDownDTO> GenderTypes { get; set; } = new HashSet<DropDownDTO>();

    public IEnumerable<DropDownDTO> CompanyLocations { get; set; } = new HashSet<DropDownDTO>();

    bool success;
    string[] errors = { };
    MudForm form;

    protected override async Task OnInitializedAsync()
    {
        LoadingService.Show();
        Departments = await DepartmentService.GetAllDepartments(string.Empty);
        Roles = await UserService.GetAvailableRoles();
        MaritalStatuses = EnumHelper.GetDropDownList<MaritalStatus>();
        EmploymentTypes = await UserService.GetAvailableEmploymentTypes();
        GenderTypes = UserService.GetAvailableGenderTypes();
        CompanyLocations = await MasterDateService.GetOfficeLocations();

        if (UserId != ApplicationConstants.EmptyGuide)
        {
            User = await UserService.GetUserByIdAsync(UserId);
            User.Departments = Departments.Where(x => User.DepartmentIds.Contains(x.Id)).ToList();

            var employmentType = EmploymentTypes.FirstOrDefault(x => x.Id == User.SelectedEmploymentType.Id);
            User.SelectedEmploymentType = employmentType is not null ? employmentType : EmploymentTypes.FirstOrDefault();

            var genderType = GenderTypes.FirstOrDefault(x => x.Id == User.SelectedGender.Id);
            User.SelectedGender = genderType is not null ? genderType : GenderTypes.FirstOrDefault();

            var userRole = Roles.FirstOrDefault(x => x.Id == User.SelectedRole.Id);
            User.SelectedRole = userRole is not null ? userRole : Roles.FirstOrDefault();

            var companyLocation = CompanyLocations.FirstOrDefault(x => x.Id == User.SelectedCompanyLocation.Id);
            User.SelectedCompanyLocation = companyLocation is not null ? companyLocation : CompanyLocations.FirstOrDefault();
        }

        LoadingService.Hide();
    }

    private async Task Submit() {

        LoadingService.Show();
        if (UserId != ApplicationConstants.EmptyGuide)
        {
            var result = await UserService.UpdateExistingUserAsync(User);
        }
        else
        {
            var result = await UserService.CreateNewUserAsync(User);
            // await DepartmentService
            // .AddUsersToDepartments(User.Departments.Select(x => x.Id).ToList(), result.UserId);

        }

        LoadingService.Hide();

        await OnDialogClosed.InvokeAsync(true); // Notify parent
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();


}
